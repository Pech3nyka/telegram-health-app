require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

function showMainMenu(ctx) {
  return ctx.reply(
    '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'üèÉ –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'],
      ['üò¥ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–Ω', 'üìù –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
    ])
    .resize()
    .oneTime()
  );
}

bot.start(async (ctx) => {
  const user = ctx.from;
  try {
    await axios.post(`${API_BASE_URL}/api/user`, {
      telegramId: String(user.id),
      name: user.first_name || user.username || 'Unknown'
    });
    await showMainMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

bot.hears('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', async (ctx) => {
  try {
    const res = await axios.get(`${API_BASE_URL}/api/getStats`);
    const stats = res.data;
    await ctx.reply(
      `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
      `–®–∞–≥–∏: ${stats.steps}\n` +
      `–ö–∞–ª–æ—Ä–∏–∏: ${stats.calories}\n` +
      `–°–æ–Ω: ${stats.sleep} —á–∞—Å–æ–≤\n` +
      `–í–æ–¥–∞: ${stats.water} –ª–∏—Ç—Ä–æ–≤`,
      Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears('üèÉ –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', (ctx) => {
  ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/activity <—à–∞–≥–∏> <–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∫–º> <–∫–∞–ª–æ—Ä–∏–∏>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /activity 5000 3.2 200',
    Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime()
  );
});

bot.command('activity', async (ctx) => {
  const text = ctx.message.text;
  const parts = text.split(' ');

  if (parts.length !== 4) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /activity <steps> <distanceKm> <calories>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /activity 5000 3.2 200');
  }

  const [, stepsStr, distanceStr, caloriesStr] = parts;
  const steps = Number(stepsStr);
  const distanceKm = Number(distanceStr);
  const calories = Number(caloriesStr);

  if (isNaN(steps) || isNaN(distanceKm) || isNaN(calories)) {
    return ctx.reply('–û—à–∏–±–∫–∞: —à–∞–≥–∏, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∏ –∫–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.');
  }

  try {
    await axios.post(`${API_BASE_URL}/api/activity`, {
      telegramId: String(ctx.from.id),
      steps,
      distanceKm,
      calories
    });
    await ctx.reply('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.');
  }
});

bot.hears('üò¥ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–Ω', (ctx) => {
  ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/sleep <—á–∞—Å—ã> <–∫–∞—á–µ—Å—Ç–≤–æ>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /sleep 7.5 —Ö–æ—Ä–æ—à–∏–π',
    Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime()
  );
});

bot.command('sleep', async (ctx) => {
  const text = ctx.message.text;
  const parts = text.split(' ');

  if (parts.length < 3) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/sleep <—á–∞—Å—ã> <–∫–∞—á–µ—Å—Ç–≤–æ>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /sleep 7.5 —Ö–æ—Ä–æ—à–∏–π');
  }

  const hours = parseFloat(parts[1]);
  const quality = parts.slice(2).join(' ');

  if (isNaN(hours)) {
    return ctx.reply('–û—à–∏–±–∫–∞: —á–∞—Å—ã —Å–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 7.5');
  }

  try {
    await axios.post(`${API_BASE_URL}/api/sleep`, {
      telegramId: String(ctx.from.id),
      hours,
      quality
    });
    await ctx.reply('–î–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∞:', error.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

bot.hears('üìù –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', async (ctx) => {
  ctx.telegram.emit('text', { ...ctx.message, text: '/myactivity' }, ctx);
});

bot.command('myactivity', async (ctx) => {
  try {
    const res = await axios.get(`${API_BASE_URL}/api/activity/${ctx.from.id}`);
    const activities = res.data;

    if (!activities.length) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.');
    }

    const last = activities[activities.length - 1];
    const date = new Date(last.date).toLocaleString('ru-RU');

    await ctx.reply(
      `üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n` +
      `üìÖ –î–∞—Ç–∞: ${date}\n` +
      `üö∂ –®–∞–≥–∏: ${last.steps}\n` +
      `üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${last.distanceKm} –∫–º\n` +
      `üî• –ö–∞–ª–æ—Ä–∏–∏: ${last.calories}`,
      Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize().oneTime()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
  showMainMenu(ctx);
});

bot.launch();
console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
